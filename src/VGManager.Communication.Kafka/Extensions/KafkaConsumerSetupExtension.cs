using Confluent.Kafka;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using VGManager.Communication.Kafka.Configurations;
using VGManager.Communication.Kafka.Helper;
using VGManager.Communication.Kafka.Interfaces;
using VGManager.Communication.Models;

namespace VGManager.Communication.Kafka.Extensions;

public static class KafkaConsumerSetupExtension
{
    private const string AutoGeneratedGroupIdTemplate = "{0}{1}";

    public static void SetupKafkaConsumer<TMessageType>(
        this IServiceCollection services,
        IConfiguration configuration,
        string kafkaConsumerSectionKey,
        bool autoGenerateGroupId)
        where TMessageType : MessageBase
    {
        var consumerConfig = configuration.GetSection(kafkaConsumerSectionKey)
            .Get<KafkaConsumerConfiguration<TMessageType>>();

        if (autoGenerateGroupId)
        {
            consumerConfig.ConsumerConfig.GroupId = string.Format(
                AutoGeneratedGroupIdTemplate,
                consumerConfig.GroupIdPrefix,
                Guid.NewGuid().ToString()
            );
        }

        services.AddSingleton(serviceProvider =>
        {
            return new ConsumerBuilder<Ignore, TMessageType>(consumerConfig.ConsumerConfig)
            .SetValueDeserializer(new MessageSerializer<TMessageType>())
            .SetLogHandler(LogHandler<TMessageType>(serviceProvider))
            .Build();
        });

        services.AddSingleton(consumerConfig);
        services.AddSingleton<IKafkaConsumerService<TMessageType>, KafkaConsumerService<TMessageType>>();
    }

    private static Action<IConsumer<Ignore, TMessageType>, LogMessage> LogHandler<TMessageType>(IServiceProvider serviceProvider) where TMessageType : MessageBase
    {
        return (consumer, logMessage) =>
        {
            var logger = serviceProvider.GetRequiredService<ILogger<KafkaConsumerService<TMessageType>>>();
            LogHelper.Log(logMessage, logger);
        };
    }
}
